/* Auto-generated by genmsg_cpp for file /home/diro/ros_workspace/final_project/trunk/cart_local_planner/msg/pose2D.msg */
#ifndef CART_LOCAL_PLANNER_MESSAGE_POSE2D_H
#define CART_LOCAL_PLANNER_MESSAGE_POSE2D_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace cart_local_planner
{
template <class ContainerAllocator>
struct pose2D_ {
  typedef pose2D_<ContainerAllocator> Type;

  pose2D_()
  : x(0.0)
  , y(0.0)
  , t(0.0)
  {
  }

  pose2D_(const ContainerAllocator& _alloc)
  : x(0.0)
  , y(0.0)
  , t(0.0)
  {
  }

  typedef float _x_type;
  float x;

  typedef float _y_type;
  float y;

  typedef float _t_type;
  float t;


  typedef boost::shared_ptr< ::cart_local_planner::pose2D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cart_local_planner::pose2D_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct pose2D
typedef  ::cart_local_planner::pose2D_<std::allocator<void> > pose2D;

typedef boost::shared_ptr< ::cart_local_planner::pose2D> pose2DPtr;
typedef boost::shared_ptr< ::cart_local_planner::pose2D const> pose2DConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cart_local_planner::pose2D_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cart_local_planner::pose2D_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cart_local_planner

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cart_local_planner::pose2D_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cart_local_planner::pose2D_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cart_local_planner::pose2D_<ContainerAllocator> > {
  static const char* value() 
  {
    return "35ad9130386373e3ccc4c834c109c59c";
  }

  static const char* value(const  ::cart_local_planner::pose2D_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x35ad9130386373e3ULL;
  static const uint64_t static_value2 = 0xccc4c834c109c59cULL;
};

template<class ContainerAllocator>
struct DataType< ::cart_local_planner::pose2D_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cart_local_planner/pose2D";
  }

  static const char* value(const  ::cart_local_planner::pose2D_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cart_local_planner::pose2D_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# x,y,theta\n\
float32 x\n\
float32 y\n\
float32 t\n\
\n\
";
  }

  static const char* value(const  ::cart_local_planner::pose2D_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cart_local_planner::pose2D_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cart_local_planner::pose2D_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.t);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct pose2D_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cart_local_planner::pose2D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cart_local_planner::pose2D_<ContainerAllocator> & v) 
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "t: ";
    Printer<float>::stream(s, indent + "  ", v.t);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CART_LOCAL_PLANNER_MESSAGE_POSE2D_H

