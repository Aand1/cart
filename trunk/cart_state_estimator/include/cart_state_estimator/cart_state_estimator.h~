/*
 * Copyright (c) 2008, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Willow Garage, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 * cart_state_estimator.h
 *
 *  Created on: Aug 6, 2010
 *      Author: jscholz
 */

#ifndef CART_STATE_ESTIMATOR_H_
#define CART_STATE_ESTIMATOR_H_

#include <manipulation_transforms/manipulation_transforms_ros.h>
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>
#include <tf/exceptions.h>
#include <geometry_msgs/PolygonStamped.h>
#include <ros/ros.h>
#include <ros/time.h>
#include <string>
#include <boost/optional.hpp>
#include <boost/thread.hpp>
#include <boost/format.hpp>

namespace cart_state_estimator {

namespace gm=geometry_msgs;
using std::string;
using ros::WallDuration;
using ros::Duration;
using ros::WallTimerEvent;
using tf::StampedTransform;
using boost::optional;
using ros::Time;
using boost::format;

typedef tf::Stamped<tf::Pose> StampedPose;
typedef boost::mutex::scoped_lock Lock;

class CartStateEstimator {
public:

	CartStateEstimator();

private:

	void publishState(const ros::WallTimerEvent& e);
	StampedTransform computeCartFrame(const StampedPose& left,
			const StampedPose& right) const;
	void broadcastCartPose(const string& frame, const btTransform& trans);
	btTransform cartPoseFromCheckerboard(const btTransform& cb_pose) const;
	gm::PolygonStamped getProjectedFootprint() const;

	const double cart_width_;
	const double cart_length_;
	const string l_gripper_frame_, r_gripper_frame_;
	const bool publish_fake_transforms_;
	const geometry_msgs::PolygonStamped footprint_;
	const double footprint_x_offset_, footprint_y_offset_;
	const double publication_interval_;
	const double transform_recency_threshold_;

	const btTransform cart_to_board_;

	boost::mutex mutex_;
	ros::NodeHandle nh_;
	tf::TransformListener tf_listener_;
	tf::TransformBroadcaster tf_broadcaster_;
	ros::WallTimer pub_timer_;
	ros::Publisher footprint_pub_;
	ros::ServiceClient effector_to_cart_client_;
	ros::ServiceClient set_solver_transforms_client_;
};
} // namespace cart_state_estimator

#endif /* CART_STATE_ESTIMATOR_H_ */
