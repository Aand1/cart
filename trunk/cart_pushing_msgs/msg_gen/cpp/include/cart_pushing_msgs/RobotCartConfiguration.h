/* Auto-generated by genmsg_cpp for file /home/diro/ros_workspace/final_project/trunk/cart_pushing_msgs/msg/RobotCartConfiguration.msg */
#ifndef CART_PUSHING_MSGS_MESSAGE_ROBOTCARTCONFIGURATION_H
#define CART_PUSHING_MSGS_MESSAGE_ROBOTCARTCONFIGURATION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Pose.h"
#include "geometry_msgs/Pose.h"

namespace cart_pushing_msgs
{
template <class ContainerAllocator>
struct RobotCartConfiguration_ {
  typedef RobotCartConfiguration_<ContainerAllocator> Type;

  RobotCartConfiguration_()
  : robot_pose()
  , cart_pose()
  {
  }

  RobotCartConfiguration_(const ContainerAllocator& _alloc)
  : robot_pose(_alloc)
  , cart_pose(_alloc)
  {
  }

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _robot_pose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  robot_pose;

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _cart_pose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  cart_pose;


  typedef boost::shared_ptr< ::cart_pushing_msgs::RobotCartConfiguration_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cart_pushing_msgs::RobotCartConfiguration_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RobotCartConfiguration
typedef  ::cart_pushing_msgs::RobotCartConfiguration_<std::allocator<void> > RobotCartConfiguration;

typedef boost::shared_ptr< ::cart_pushing_msgs::RobotCartConfiguration> RobotCartConfigurationPtr;
typedef boost::shared_ptr< ::cart_pushing_msgs::RobotCartConfiguration const> RobotCartConfigurationConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cart_pushing_msgs::RobotCartConfiguration_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cart_pushing_msgs::RobotCartConfiguration_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cart_pushing_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cart_pushing_msgs::RobotCartConfiguration_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cart_pushing_msgs::RobotCartConfiguration_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cart_pushing_msgs::RobotCartConfiguration_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b6763adc7a4163e81b79c0de27053f06";
  }

  static const char* value(const  ::cart_pushing_msgs::RobotCartConfiguration_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb6763adc7a4163e8ULL;
  static const uint64_t static_value2 = 0x1b79c0de27053f06ULL;
};

template<class ContainerAllocator>
struct DataType< ::cart_pushing_msgs::RobotCartConfiguration_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cart_pushing_msgs/RobotCartConfiguration";
  }

  static const char* value(const  ::cart_pushing_msgs::RobotCartConfiguration_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cart_pushing_msgs::RobotCartConfiguration_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Robot's pose in reference frame\n\
geometry_msgs/Pose robot_pose\n\
\n\
# Cart's pose in base frame\n\
geometry_msgs/Pose cart_pose\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::cart_pushing_msgs::RobotCartConfiguration_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cart_pushing_msgs::RobotCartConfiguration_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cart_pushing_msgs::RobotCartConfiguration_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.robot_pose);
    stream.next(m.cart_pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RobotCartConfiguration_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cart_pushing_msgs::RobotCartConfiguration_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cart_pushing_msgs::RobotCartConfiguration_<ContainerAllocator> & v) 
  {
    s << indent << "robot_pose: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_pose);
    s << indent << "cart_pose: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.cart_pose);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CART_PUSHING_MSGS_MESSAGE_ROBOTCARTCONFIGURATION_H

