/* Auto-generated by genmsg_cpp for file /home/diro/ros_workspace/final_project/trunk/sbpl_cart_planner/msg/SBPLCartPlannerStats.msg */
#ifndef SBPL_CART_PLANNER_MESSAGE_SBPLCARTPLANNERSTATS_H
#define SBPL_CART_PLANNER_MESSAGE_SBPLCARTPLANNERSTATS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/PoseStamped.h"
#include "geometry_msgs/PoseStamped.h"
#include "cart_pushing_msgs/RobotCartPath.h"

namespace sbpl_cart_planner
{
template <class ContainerAllocator>
struct SBPLCartPlannerStats_ {
  typedef SBPLCartPlannerStats_<ContainerAllocator> Type;

  SBPLCartPlannerStats_()
  : initial_epsilon(0.0)
  , final_epsilon(0.0)
  , plan_to_first_solution(false)
  , allocated_time(0.0)
  , actual_time(0.0)
  , time_to_first_solution(0.0)
  , solution_cost(0.0)
  , path_size(0.0)
  , final_number_of_expands(0)
  , number_of_expands_initial_solution(0)
  , start()
  , start_cart_angle(0.0)
  , goal()
  , goal_cart_angle(0.0)
  , solution()
  {
  }

  SBPLCartPlannerStats_(const ContainerAllocator& _alloc)
  : initial_epsilon(0.0)
  , final_epsilon(0.0)
  , plan_to_first_solution(false)
  , allocated_time(0.0)
  , actual_time(0.0)
  , time_to_first_solution(0.0)
  , solution_cost(0.0)
  , path_size(0.0)
  , final_number_of_expands(0)
  , number_of_expands_initial_solution(0)
  , start(_alloc)
  , start_cart_angle(0.0)
  , goal(_alloc)
  , goal_cart_angle(0.0)
  , solution(_alloc)
  {
  }

  typedef double _initial_epsilon_type;
  double initial_epsilon;

  typedef double _final_epsilon_type;
  double final_epsilon;

  typedef uint8_t _plan_to_first_solution_type;
  uint8_t plan_to_first_solution;

  typedef double _allocated_time_type;
  double allocated_time;

  typedef double _actual_time_type;
  double actual_time;

  typedef double _time_to_first_solution_type;
  double time_to_first_solution;

  typedef double _solution_cost_type;
  double solution_cost;

  typedef double _path_size_type;
  double path_size;

  typedef int64_t _final_number_of_expands_type;
  int64_t final_number_of_expands;

  typedef int64_t _number_of_expands_initial_solution_type;
  int64_t number_of_expands_initial_solution;

  typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _start_type;
   ::geometry_msgs::PoseStamped_<ContainerAllocator>  start;

  typedef double _start_cart_angle_type;
  double start_cart_angle;

  typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _goal_type;
   ::geometry_msgs::PoseStamped_<ContainerAllocator>  goal;

  typedef double _goal_cart_angle_type;
  double goal_cart_angle;

  typedef  ::cart_pushing_msgs::RobotCartPath_<ContainerAllocator>  _solution_type;
   ::cart_pushing_msgs::RobotCartPath_<ContainerAllocator>  solution;


  typedef boost::shared_ptr< ::sbpl_cart_planner::SBPLCartPlannerStats_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sbpl_cart_planner::SBPLCartPlannerStats_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SBPLCartPlannerStats
typedef  ::sbpl_cart_planner::SBPLCartPlannerStats_<std::allocator<void> > SBPLCartPlannerStats;

typedef boost::shared_ptr< ::sbpl_cart_planner::SBPLCartPlannerStats> SBPLCartPlannerStatsPtr;
typedef boost::shared_ptr< ::sbpl_cart_planner::SBPLCartPlannerStats const> SBPLCartPlannerStatsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::sbpl_cart_planner::SBPLCartPlannerStats_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::sbpl_cart_planner::SBPLCartPlannerStats_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace sbpl_cart_planner

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sbpl_cart_planner::SBPLCartPlannerStats_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sbpl_cart_planner::SBPLCartPlannerStats_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sbpl_cart_planner::SBPLCartPlannerStats_<ContainerAllocator> > {
  static const char* value() 
  {
    return "59dcf49825e7e59499a38ffdd0daa999";
  }

  static const char* value(const  ::sbpl_cart_planner::SBPLCartPlannerStats_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x59dcf49825e7e594ULL;
  static const uint64_t static_value2 = 0x99a38ffdd0daa999ULL;
};

template<class ContainerAllocator>
struct DataType< ::sbpl_cart_planner::SBPLCartPlannerStats_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sbpl_cart_planner/SBPLCartPlannerStats";
  }

  static const char* value(const  ::sbpl_cart_planner::SBPLCartPlannerStats_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sbpl_cart_planner::SBPLCartPlannerStats_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#planner stats\n\
float64 initial_epsilon\n\
float64 final_epsilon\n\
bool plan_to_first_solution\n\
float64 allocated_time\n\
float64 actual_time\n\
float64 time_to_first_solution\n\
float64 solution_cost\n\
float64 path_size\n\
int64 final_number_of_expands\n\
int64 number_of_expands_initial_solution\n\
\n\
#problem stats\n\
geometry_msgs/PoseStamped start\n\
float64 start_cart_angle\n\
geometry_msgs/PoseStamped goal\n\
float64 goal_cart_angle\n\
\n\
#solution\n\
cart_pushing_msgs/RobotCartPath solution\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: cart_pushing_msgs/RobotCartPath\n\
Header header\n\
RobotCartConfiguration[] path\n\
================================================================================\n\
MSG: cart_pushing_msgs/RobotCartConfiguration\n\
# Robot's pose in reference frame\n\
geometry_msgs/Pose robot_pose\n\
\n\
# Cart's pose in base frame\n\
geometry_msgs/Pose cart_pose\n\
";
  }

  static const char* value(const  ::sbpl_cart_planner::SBPLCartPlannerStats_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sbpl_cart_planner::SBPLCartPlannerStats_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.initial_epsilon);
    stream.next(m.final_epsilon);
    stream.next(m.plan_to_first_solution);
    stream.next(m.allocated_time);
    stream.next(m.actual_time);
    stream.next(m.time_to_first_solution);
    stream.next(m.solution_cost);
    stream.next(m.path_size);
    stream.next(m.final_number_of_expands);
    stream.next(m.number_of_expands_initial_solution);
    stream.next(m.start);
    stream.next(m.start_cart_angle);
    stream.next(m.goal);
    stream.next(m.goal_cart_angle);
    stream.next(m.solution);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SBPLCartPlannerStats_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sbpl_cart_planner::SBPLCartPlannerStats_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::sbpl_cart_planner::SBPLCartPlannerStats_<ContainerAllocator> & v) 
  {
    s << indent << "initial_epsilon: ";
    Printer<double>::stream(s, indent + "  ", v.initial_epsilon);
    s << indent << "final_epsilon: ";
    Printer<double>::stream(s, indent + "  ", v.final_epsilon);
    s << indent << "plan_to_first_solution: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.plan_to_first_solution);
    s << indent << "allocated_time: ";
    Printer<double>::stream(s, indent + "  ", v.allocated_time);
    s << indent << "actual_time: ";
    Printer<double>::stream(s, indent + "  ", v.actual_time);
    s << indent << "time_to_first_solution: ";
    Printer<double>::stream(s, indent + "  ", v.time_to_first_solution);
    s << indent << "solution_cost: ";
    Printer<double>::stream(s, indent + "  ", v.solution_cost);
    s << indent << "path_size: ";
    Printer<double>::stream(s, indent + "  ", v.path_size);
    s << indent << "final_number_of_expands: ";
    Printer<int64_t>::stream(s, indent + "  ", v.final_number_of_expands);
    s << indent << "number_of_expands_initial_solution: ";
    Printer<int64_t>::stream(s, indent + "  ", v.number_of_expands_initial_solution);
    s << indent << "start: ";
s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.start);
    s << indent << "start_cart_angle: ";
    Printer<double>::stream(s, indent + "  ", v.start_cart_angle);
    s << indent << "goal: ";
s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
    s << indent << "goal_cart_angle: ";
    Printer<double>::stream(s, indent + "  ", v.goal_cart_angle);
    s << indent << "solution: ";
s << std::endl;
    Printer< ::cart_pushing_msgs::RobotCartPath_<ContainerAllocator> >::stream(s, indent + "  ", v.solution);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SBPL_CART_PLANNER_MESSAGE_SBPLCARTPLANNERSTATS_H

